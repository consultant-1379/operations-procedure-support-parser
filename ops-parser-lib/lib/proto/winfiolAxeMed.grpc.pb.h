// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: winfiolAxeMed.proto
#ifndef GRPC_winfiolAxeMed_2eproto__INCLUDED
#define GRPC_winfiolAxeMed_2eproto__INCLUDED

#include "winfiolAxeMed.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace winfiolAxeMed {

class WinFIOLAxeMediation final {
 public:
  static constexpr char const* service_full_name() {
    return "winfiolAxeMed.WinFIOLAxeMediation";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::winfiolAxeMed::SessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::SessionResponse>> AsyncCreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::SessionResponse>>(AsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::SessionResponse>> PrepareAsyncCreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::SessionResponse>>(PrepareAsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::winfiolAxeMed::StreamMessage>> CreateAsyncSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::winfiolAxeMed::StreamMessage>>(CreateAsyncSessionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::winfiolAxeMed::StreamMessage>> AsyncCreateAsyncSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::winfiolAxeMed::StreamMessage>>(AsyncCreateAsyncSessionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::winfiolAxeMed::StreamMessage>> PrepareAsyncCreateAsyncSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::winfiolAxeMed::StreamMessage>>(PrepareAsyncCreateAsyncSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status Connect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::winfiolAxeMed::GenericResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>> AsyncConnect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status SendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::winfiolAxeMed::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::CommandResponse>> AsyncSendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::CommandResponse>>(AsyncSendCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::CommandResponse>> PrepareAsyncSendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::CommandResponse>>(PrepareAsyncSendCommandRaw(context, request, cq));
    }
    virtual ::grpc::Status ConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::winfiolAxeMed::GenericResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>> AsyncConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>>(AsyncConnectionStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>> PrepareAsyncConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>>(PrepareAsyncConnectionStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status TerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::winfiolAxeMed::GenericResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>> AsyncTerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>>(AsyncTerminateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>> PrepareAsyncTerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>>(PrepareAsyncTerminateSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status ControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::winfiolAxeMed::GenericResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>> AsyncControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>>(AsyncControlNeTerminalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>> PrepareAsyncControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>>(PrepareAsyncControlNeTerminalRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest* request, ::winfiolAxeMed::SessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::SessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest* request, ::winfiolAxeMed::SessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::SessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateAsyncSession(::grpc::ClientContext* context, ::winfiolAxeMed::SessionRequest* request, ::grpc::experimental::ClientReadReactor< ::winfiolAxeMed::StreamMessage>* reactor) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest* request, ::winfiolAxeMed::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest* request, ::winfiolAxeMed::CommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SendCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::CommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConnectionStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ConnectionStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void TerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TerminateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void TerminateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ControlNeTerminal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ControlNeTerminal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::SessionResponse>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::SessionResponse>* PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::winfiolAxeMed::StreamMessage>* CreateAsyncSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::winfiolAxeMed::StreamMessage>* AsyncCreateAsyncSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::winfiolAxeMed::StreamMessage>* PrepareAsyncCreateAsyncSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>* AsyncConnectRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::CommandResponse>* AsyncSendCommandRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::CommandResponse>* PrepareAsyncSendCommandRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>* AsyncConnectionStatusRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>* PrepareAsyncConnectionStatusRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>* AsyncTerminateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>* PrepareAsyncTerminateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>* AsyncControlNeTerminalRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::winfiolAxeMed::GenericResponse>* PrepareAsyncControlNeTerminalRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::winfiolAxeMed::SessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::SessionResponse>> AsyncCreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::SessionResponse>>(AsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::SessionResponse>> PrepareAsyncCreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::SessionResponse>>(PrepareAsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::winfiolAxeMed::StreamMessage>> CreateAsyncSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::winfiolAxeMed::StreamMessage>>(CreateAsyncSessionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::winfiolAxeMed::StreamMessage>> AsyncCreateAsyncSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::winfiolAxeMed::StreamMessage>>(AsyncCreateAsyncSessionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::winfiolAxeMed::StreamMessage>> PrepareAsyncCreateAsyncSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::winfiolAxeMed::StreamMessage>>(PrepareAsyncCreateAsyncSessionRaw(context, request, cq));
    }
    ::grpc::Status Connect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::winfiolAxeMed::GenericResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>> AsyncConnect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    ::grpc::Status SendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::winfiolAxeMed::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::CommandResponse>> AsyncSendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::CommandResponse>>(AsyncSendCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::CommandResponse>> PrepareAsyncSendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::CommandResponse>>(PrepareAsyncSendCommandRaw(context, request, cq));
    }
    ::grpc::Status ConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::winfiolAxeMed::GenericResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>> AsyncConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>>(AsyncConnectionStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>> PrepareAsyncConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>>(PrepareAsyncConnectionStatusRaw(context, request, cq));
    }
    ::grpc::Status TerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::winfiolAxeMed::GenericResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>> AsyncTerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>>(AsyncTerminateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>> PrepareAsyncTerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>>(PrepareAsyncTerminateSessionRaw(context, request, cq));
    }
    ::grpc::Status ControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::winfiolAxeMed::GenericResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>> AsyncControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>>(AsyncControlNeTerminalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>> PrepareAsyncControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>>(PrepareAsyncControlNeTerminalRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest* request, ::winfiolAxeMed::SessionResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::SessionResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest* request, ::winfiolAxeMed::SessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::SessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateAsyncSession(::grpc::ClientContext* context, ::winfiolAxeMed::SessionRequest* request, ::grpc::experimental::ClientReadReactor< ::winfiolAxeMed::StreamMessage>* reactor) override;
      void Connect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) override;
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) override;
      void Connect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest* request, ::winfiolAxeMed::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void SendCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void SendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest* request, ::winfiolAxeMed::CommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SendCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::CommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) override;
      void ConnectionStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) override;
      void ConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ConnectionStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void TerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) override;
      void TerminateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) override;
      void TerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void TerminateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) override;
      void ControlNeTerminal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)>) override;
      void ControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ControlNeTerminal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::SessionResponse>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::SessionResponse>* PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::winfiolAxeMed::StreamMessage>* CreateAsyncSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request) override;
    ::grpc::ClientAsyncReader< ::winfiolAxeMed::StreamMessage>* AsyncCreateAsyncSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::winfiolAxeMed::StreamMessage>* PrepareAsyncCreateAsyncSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* AsyncConnectRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::CommandResponse>* AsyncSendCommandRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::CommandResponse>* PrepareAsyncSendCommandRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* AsyncConnectionStatusRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* PrepareAsyncConnectionStatusRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* AsyncTerminateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* PrepareAsyncTerminateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* AsyncControlNeTerminalRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* PrepareAsyncControlNeTerminalRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSession_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAsyncSession_;
    const ::grpc::internal::RpcMethod rpcmethod_Connect_;
    const ::grpc::internal::RpcMethod rpcmethod_SendCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_ConnectionStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_TerminateSession_;
    const ::grpc::internal::RpcMethod rpcmethod_ControlNeTerminal_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateSession(::grpc::ServerContext* context, const ::winfiolAxeMed::SessionRequest* request, ::winfiolAxeMed::SessionResponse* response);
    virtual ::grpc::Status CreateAsyncSession(::grpc::ServerContext* context, const ::winfiolAxeMed::SessionRequest* request, ::grpc::ServerWriter< ::winfiolAxeMed::StreamMessage>* writer);
    virtual ::grpc::Status Connect(::grpc::ServerContext* context, const ::winfiolAxeMed::ConnectRequest* request, ::winfiolAxeMed::GenericResponse* response);
    virtual ::grpc::Status SendCommand(::grpc::ServerContext* context, const ::winfiolAxeMed::CommandRequest* request, ::winfiolAxeMed::CommandResponse* response);
    virtual ::grpc::Status ConnectionStatus(::grpc::ServerContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response);
    virtual ::grpc::Status TerminateSession(::grpc::ServerContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response);
    virtual ::grpc::Status ControlNeTerminal(::grpc::ServerContext* context, const ::winfiolAxeMed::TerminalActionRequest* request, ::winfiolAxeMed::GenericResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::winfiolAxeMed::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSession(::grpc::ServerContext* context, ::winfiolAxeMed::SessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::winfiolAxeMed::SessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAsyncSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAsyncSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateAsyncSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAsyncSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::grpc::ServerWriter< ::winfiolAxeMed::StreamMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAsyncSession(::grpc::ServerContext* context, ::winfiolAxeMed::SessionRequest* request, ::grpc::ServerAsyncWriter< ::winfiolAxeMed::StreamMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Connect() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::ConnectRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::winfiolAxeMed::ConnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::winfiolAxeMed::GenericResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendCommand() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::CommandRequest* /*request*/, ::winfiolAxeMed::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCommand(::grpc::ServerContext* context, ::winfiolAxeMed::CommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::winfiolAxeMed::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConnectionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConnectionStatus() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ConnectionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectionStatus(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectionStatus(::grpc::ServerContext* context, ::winfiolAxeMed::GenericRequest* request, ::grpc::ServerAsyncResponseWriter< ::winfiolAxeMed::GenericResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TerminateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TerminateSession() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_TerminateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTerminateSession(::grpc::ServerContext* context, ::winfiolAxeMed::GenericRequest* request, ::grpc::ServerAsyncResponseWriter< ::winfiolAxeMed::GenericResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ControlNeTerminal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ControlNeTerminal() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ControlNeTerminal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlNeTerminal(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::TerminalActionRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlNeTerminal(::grpc::ServerContext* context, ::winfiolAxeMed::TerminalActionRequest* request, ::grpc::ServerAsyncResponseWriter< ::winfiolAxeMed::GenericResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSession<WithAsyncMethod_CreateAsyncSession<WithAsyncMethod_Connect<WithAsyncMethod_SendCommand<WithAsyncMethod_ConnectionStatus<WithAsyncMethod_TerminateSession<WithAsyncMethod_ControlNeTerminal<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateSession() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::SessionRequest, ::winfiolAxeMed::SessionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::winfiolAxeMed::SessionRequest* request,
                 ::winfiolAxeMed::SessionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateSession(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateSession(
        ::grpc::experimental::MessageAllocator< ::winfiolAxeMed::SessionRequest, ::winfiolAxeMed::SessionResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::SessionRequest, ::winfiolAxeMed::SessionResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::winfiolAxeMed::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::winfiolAxeMed::SessionResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateAsyncSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateAsyncSession() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::winfiolAxeMed::SessionRequest, ::winfiolAxeMed::StreamMessage>(
          [this] { return this->CreateAsyncSession(); }));
    }
    ~ExperimentalWithCallbackMethod_CreateAsyncSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAsyncSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::grpc::ServerWriter< ::winfiolAxeMed::StreamMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::winfiolAxeMed::SessionRequest, ::winfiolAxeMed::StreamMessage>* CreateAsyncSession() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::winfiolAxeMed::SessionRequest, ::winfiolAxeMed::StreamMessage>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Connect() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::ConnectRequest, ::winfiolAxeMed::GenericResponse>(
          [this](::grpc::ServerContext* context,
                 const ::winfiolAxeMed::ConnectRequest* request,
                 ::winfiolAxeMed::GenericResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Connect(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Connect(
        ::grpc::experimental::MessageAllocator< ::winfiolAxeMed::ConnectRequest, ::winfiolAxeMed::GenericResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::ConnectRequest, ::winfiolAxeMed::GenericResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::ConnectRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Connect(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::ConnectRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendCommand() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::CommandRequest, ::winfiolAxeMed::CommandResponse>(
          [this](::grpc::ServerContext* context,
                 const ::winfiolAxeMed::CommandRequest* request,
                 ::winfiolAxeMed::CommandResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SendCommand(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SendCommand(
        ::grpc::experimental::MessageAllocator< ::winfiolAxeMed::CommandRequest, ::winfiolAxeMed::CommandResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::CommandRequest, ::winfiolAxeMed::CommandResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::CommandRequest* /*request*/, ::winfiolAxeMed::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendCommand(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::CommandRequest* /*request*/, ::winfiolAxeMed::CommandResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ConnectionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ConnectionStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::GenericRequest, ::winfiolAxeMed::GenericResponse>(
          [this](::grpc::ServerContext* context,
                 const ::winfiolAxeMed::GenericRequest* request,
                 ::winfiolAxeMed::GenericResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ConnectionStatus(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ConnectionStatus(
        ::grpc::experimental::MessageAllocator< ::winfiolAxeMed::GenericRequest, ::winfiolAxeMed::GenericResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::GenericRequest, ::winfiolAxeMed::GenericResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ConnectionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectionStatus(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ConnectionStatus(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TerminateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TerminateSession() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::GenericRequest, ::winfiolAxeMed::GenericResponse>(
          [this](::grpc::ServerContext* context,
                 const ::winfiolAxeMed::GenericRequest* request,
                 ::winfiolAxeMed::GenericResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->TerminateSession(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_TerminateSession(
        ::grpc::experimental::MessageAllocator< ::winfiolAxeMed::GenericRequest, ::winfiolAxeMed::GenericResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::GenericRequest, ::winfiolAxeMed::GenericResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TerminateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TerminateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ControlNeTerminal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ControlNeTerminal() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::TerminalActionRequest, ::winfiolAxeMed::GenericResponse>(
          [this](::grpc::ServerContext* context,
                 const ::winfiolAxeMed::TerminalActionRequest* request,
                 ::winfiolAxeMed::GenericResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ControlNeTerminal(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ControlNeTerminal(
        ::grpc::experimental::MessageAllocator< ::winfiolAxeMed::TerminalActionRequest, ::winfiolAxeMed::GenericResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::winfiolAxeMed::TerminalActionRequest, ::winfiolAxeMed::GenericResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ControlNeTerminal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlNeTerminal(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::TerminalActionRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ControlNeTerminal(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::TerminalActionRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_CreateSession<ExperimentalWithCallbackMethod_CreateAsyncSession<ExperimentalWithCallbackMethod_Connect<ExperimentalWithCallbackMethod_SendCommand<ExperimentalWithCallbackMethod_ConnectionStatus<ExperimentalWithCallbackMethod_TerminateSession<ExperimentalWithCallbackMethod_ControlNeTerminal<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::winfiolAxeMed::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAsyncSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAsyncSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateAsyncSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAsyncSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::grpc::ServerWriter< ::winfiolAxeMed::StreamMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Connect() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::ConnectRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendCommand() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::CommandRequest* /*request*/, ::winfiolAxeMed::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConnectionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConnectionStatus() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ConnectionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectionStatus(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TerminateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TerminateSession() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_TerminateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ControlNeTerminal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ControlNeTerminal() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ControlNeTerminal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlNeTerminal(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::TerminalActionRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::winfiolAxeMed::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAsyncSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAsyncSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateAsyncSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAsyncSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::grpc::ServerWriter< ::winfiolAxeMed::StreamMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAsyncSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Connect() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::ConnectRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendCommand() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::CommandRequest* /*request*/, ::winfiolAxeMed::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConnectionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConnectionStatus() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ConnectionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectionStatus(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectionStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TerminateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TerminateSession() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_TerminateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTerminateSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ControlNeTerminal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ControlNeTerminal() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ControlNeTerminal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlNeTerminal(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::TerminalActionRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlNeTerminal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateSession() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::winfiolAxeMed::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateSession(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateAsyncSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateAsyncSession() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->CreateAsyncSession(); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateAsyncSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAsyncSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::grpc::ServerWriter< ::winfiolAxeMed::StreamMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* CreateAsyncSession() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Connect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Connect(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::ConnectRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Connect(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendCommand() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SendCommand(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::CommandRequest* /*request*/, ::winfiolAxeMed::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendCommand(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ConnectionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ConnectionStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ConnectionStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ConnectionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectionStatus(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ConnectionStatus(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TerminateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TerminateSession() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->TerminateSession(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_TerminateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TerminateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TerminateSession(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ControlNeTerminal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ControlNeTerminal() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ControlNeTerminal(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ControlNeTerminal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlNeTerminal(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::TerminalActionRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ControlNeTerminal(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::winfiolAxeMed::SessionRequest, ::winfiolAxeMed::SessionResponse>(std::bind(&WithStreamedUnaryMethod_CreateSession<BaseClass>::StreamedCreateSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::winfiolAxeMed::SessionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::winfiolAxeMed::SessionRequest,::winfiolAxeMed::SessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Connect() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::winfiolAxeMed::ConnectRequest, ::winfiolAxeMed::GenericResponse>(std::bind(&WithStreamedUnaryMethod_Connect<BaseClass>::StreamedConnect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::ConnectRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::winfiolAxeMed::ConnectRequest,::winfiolAxeMed::GenericResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendCommand() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::winfiolAxeMed::CommandRequest, ::winfiolAxeMed::CommandResponse>(std::bind(&WithStreamedUnaryMethod_SendCommand<BaseClass>::StreamedSendCommand, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::CommandRequest* /*request*/, ::winfiolAxeMed::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::winfiolAxeMed::CommandRequest,::winfiolAxeMed::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConnectionStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConnectionStatus() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::winfiolAxeMed::GenericRequest, ::winfiolAxeMed::GenericResponse>(std::bind(&WithStreamedUnaryMethod_ConnectionStatus<BaseClass>::StreamedConnectionStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ConnectionStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConnectionStatus(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnectionStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::winfiolAxeMed::GenericRequest,::winfiolAxeMed::GenericResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TerminateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TerminateSession() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::winfiolAxeMed::GenericRequest, ::winfiolAxeMed::GenericResponse>(std::bind(&WithStreamedUnaryMethod_TerminateSession<BaseClass>::StreamedTerminateSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TerminateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TerminateSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::GenericRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTerminateSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::winfiolAxeMed::GenericRequest,::winfiolAxeMed::GenericResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ControlNeTerminal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ControlNeTerminal() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::winfiolAxeMed::TerminalActionRequest, ::winfiolAxeMed::GenericResponse>(std::bind(&WithStreamedUnaryMethod_ControlNeTerminal<BaseClass>::StreamedControlNeTerminal, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ControlNeTerminal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ControlNeTerminal(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::TerminalActionRequest* /*request*/, ::winfiolAxeMed::GenericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedControlNeTerminal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::winfiolAxeMed::TerminalActionRequest,::winfiolAxeMed::GenericResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSession<WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_SendCommand<WithStreamedUnaryMethod_ConnectionStatus<WithStreamedUnaryMethod_TerminateSession<WithStreamedUnaryMethod_ControlNeTerminal<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_CreateAsyncSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_CreateAsyncSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::winfiolAxeMed::SessionRequest, ::winfiolAxeMed::StreamMessage>(std::bind(&WithSplitStreamingMethod_CreateAsyncSession<BaseClass>::StreamedCreateAsyncSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_CreateAsyncSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAsyncSession(::grpc::ServerContext* /*context*/, const ::winfiolAxeMed::SessionRequest* /*request*/, ::grpc::ServerWriter< ::winfiolAxeMed::StreamMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedCreateAsyncSession(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::winfiolAxeMed::SessionRequest,::winfiolAxeMed::StreamMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_CreateAsyncSession<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSession<WithSplitStreamingMethod_CreateAsyncSession<WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_SendCommand<WithStreamedUnaryMethod_ConnectionStatus<WithStreamedUnaryMethod_TerminateSession<WithStreamedUnaryMethod_ControlNeTerminal<Service > > > > > > > StreamedService;
};

}  // namespace winfiolAxeMed


#endif  // GRPC_winfiolAxeMed_2eproto__INCLUDED
