// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: winfiolAxeMed.proto

#include "winfiolAxeMed.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace winfiolAxeMed {
class SessionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionRequest> _instance;
} _SessionRequest_default_instance_;
class SessionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionResponse> _instance;
} _SessionResponse_default_instance_;
class ConnectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectRequest> _instance;
} _ConnectRequest_default_instance_;
class CommandRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandRequest> _instance;
} _CommandRequest_default_instance_;
class CommandResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandResponse> _instance;
} _CommandResponse_default_instance_;
class StreamMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamMessage> _instance;
} _StreamMessage_default_instance_;
class TerminalActionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TerminalActionRequest> _instance;
} _TerminalActionRequest_default_instance_;
class GenericRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericRequest> _instance;
} _GenericRequest_default_instance_;
class GenericResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericResponse> _instance;
} _GenericResponse_default_instance_;
}  // namespace winfiolAxeMed
static void InitDefaultsscc_info_CommandRequest_winfiolAxeMed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::winfiolAxeMed::_CommandRequest_default_instance_;
    new (ptr) ::winfiolAxeMed::CommandRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::winfiolAxeMed::CommandRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandRequest_winfiolAxeMed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CommandRequest_winfiolAxeMed_2eproto}, {}};

static void InitDefaultsscc_info_CommandResponse_winfiolAxeMed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::winfiolAxeMed::_CommandResponse_default_instance_;
    new (ptr) ::winfiolAxeMed::CommandResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::winfiolAxeMed::CommandResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandResponse_winfiolAxeMed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CommandResponse_winfiolAxeMed_2eproto}, {}};

static void InitDefaultsscc_info_ConnectRequest_winfiolAxeMed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::winfiolAxeMed::_ConnectRequest_default_instance_;
    new (ptr) ::winfiolAxeMed::ConnectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::winfiolAxeMed::ConnectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectRequest_winfiolAxeMed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConnectRequest_winfiolAxeMed_2eproto}, {}};

static void InitDefaultsscc_info_GenericRequest_winfiolAxeMed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::winfiolAxeMed::_GenericRequest_default_instance_;
    new (ptr) ::winfiolAxeMed::GenericRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::winfiolAxeMed::GenericRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericRequest_winfiolAxeMed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericRequest_winfiolAxeMed_2eproto}, {}};

static void InitDefaultsscc_info_GenericResponse_winfiolAxeMed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::winfiolAxeMed::_GenericResponse_default_instance_;
    new (ptr) ::winfiolAxeMed::GenericResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::winfiolAxeMed::GenericResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericResponse_winfiolAxeMed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericResponse_winfiolAxeMed_2eproto}, {}};

static void InitDefaultsscc_info_SessionRequest_winfiolAxeMed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::winfiolAxeMed::_SessionRequest_default_instance_;
    new (ptr) ::winfiolAxeMed::SessionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::winfiolAxeMed::SessionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionRequest_winfiolAxeMed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SessionRequest_winfiolAxeMed_2eproto}, {}};

static void InitDefaultsscc_info_SessionResponse_winfiolAxeMed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::winfiolAxeMed::_SessionResponse_default_instance_;
    new (ptr) ::winfiolAxeMed::SessionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::winfiolAxeMed::SessionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionResponse_winfiolAxeMed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SessionResponse_winfiolAxeMed_2eproto}, {}};

static void InitDefaultsscc_info_StreamMessage_winfiolAxeMed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::winfiolAxeMed::_StreamMessage_default_instance_;
    new (ptr) ::winfiolAxeMed::StreamMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::winfiolAxeMed::StreamMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamMessage_winfiolAxeMed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StreamMessage_winfiolAxeMed_2eproto}, {}};

static void InitDefaultsscc_info_TerminalActionRequest_winfiolAxeMed_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::winfiolAxeMed::_TerminalActionRequest_default_instance_;
    new (ptr) ::winfiolAxeMed::TerminalActionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::winfiolAxeMed::TerminalActionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TerminalActionRequest_winfiolAxeMed_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TerminalActionRequest_winfiolAxeMed_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_winfiolAxeMed_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_winfiolAxeMed_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_winfiolAxeMed_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_winfiolAxeMed_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::SessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::SessionRequest, clientname_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::SessionRequest, enmuserid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::SessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::SessionResponse, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::ConnectRequest, sessionid_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::ConnectRequest, neid_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::ConnectRequest, nodeside_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::ConnectRequest, username_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::ConnectRequest, password_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::ConnectRequest, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::CommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::CommandRequest, sessionid_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::CommandRequest, cmdinput_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::CommandRequest, cmdtype_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::CommandRequest, cpname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::CommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::CommandResponse, cmdoutput_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::StreamMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::StreamMessage, sessionid_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::StreamMessage, type_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::StreamMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::TerminalActionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::TerminalActionRequest, sessionid_),
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::TerminalActionRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::GenericRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::GenericRequest, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::GenericResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::winfiolAxeMed::GenericResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::winfiolAxeMed::SessionRequest)},
  { 7, -1, sizeof(::winfiolAxeMed::SessionResponse)},
  { 13, -1, sizeof(::winfiolAxeMed::ConnectRequest)},
  { 24, -1, sizeof(::winfiolAxeMed::CommandRequest)},
  { 33, -1, sizeof(::winfiolAxeMed::CommandResponse)},
  { 39, -1, sizeof(::winfiolAxeMed::StreamMessage)},
  { 47, -1, sizeof(::winfiolAxeMed::TerminalActionRequest)},
  { 54, -1, sizeof(::winfiolAxeMed::GenericRequest)},
  { 60, -1, sizeof(::winfiolAxeMed::GenericResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::winfiolAxeMed::_SessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::winfiolAxeMed::_SessionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::winfiolAxeMed::_ConnectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::winfiolAxeMed::_CommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::winfiolAxeMed::_CommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::winfiolAxeMed::_StreamMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::winfiolAxeMed::_TerminalActionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::winfiolAxeMed::_GenericRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::winfiolAxeMed::_GenericResponse_default_instance_),
};

const char descriptor_table_protodef_winfiolAxeMed_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023winfiolAxeMed.proto\022\rwinfiolAxeMed\"7\n\016"
  "SessionRequest\022\022\n\nclientName\030\001 \001(\t\022\021\n\ten"
  "mUserId\030\002 \001(\t\"$\n\017SessionResponse\022\021\n\tsess"
  "ionId\030\001 \001(\t\"\224\002\n\016ConnectRequest\022\021\n\tsessio"
  "nId\030\001 \001(\t\022\014\n\004neId\030\002 \001(\t\022:\n\010nodeSide\030\003 \001("
  "\0162(.winfiolAxeMed.ConnectRequest.ApNodeS"
  "ide\022\020\n\010username\030\004 \001(\t\022\020\n\010password\030\005 \001(\t\022"
  "2\n\004node\030\006 \001(\0162$.winfiolAxeMed.ConnectReq"
  "uest.ApNode\"1\n\nApNodeSide\022\013\n\007CLUSTER\020\000\022\n"
  "\n\006NODE_A\020\001\022\n\n\006NODE_B\020\002\"\032\n\006ApNode\022\007\n\003AP1\020"
  "\000\022\007\n\003AP2\020\001\"V\n\016CommandRequest\022\021\n\tsessionI"
  "d\030\001 \001(\t\022\020\n\010cmdInput\030\002 \001(\t\022\017\n\007cmdType\030\003 \001"
  "(\t\022\016\n\006cpName\030\004 \001(\t\"$\n\017CommandResponse\022\021\n"
  "\tcmdOutput\030\001 \001(\t\"\227\001\n\rStreamMessage\022\021\n\tse"
  "ssionId\030\001 \001(\t\0226\n\004type\030\002 \001(\0162(.winfiolAxe"
  "Med.StreamMessage.MessageType\022\017\n\007message"
  "\030\003 \001(\t\"*\n\013MessageType\022\013\n\007CONTROL\020\000\022\016\n\nCM"
  "D_OUTPUT\020\001\"\233\001\n\025TerminalActionRequest\022\021\n\t"
  "sessionId\030\001 \001(\t\022C\n\006action\030\002 \001(\01623.winfio"
  "lAxeMed.TerminalActionRequest.TerminalAc"
  "tion\"*\n\016TerminalAction\022\013\n\007RELEASE\020\000\022\013\n\007C"
  "ONNECT\020\001\"#\n\016GenericRequest\022\021\n\tsessionId\030"
  "\001 \001(\t\"!\n\017GenericResponse\022\016\n\006status\030\001 \001(\005"
  "2\341\004\n\023WinFIOLAxeMediation\022P\n\rCreateSessio"
  "n\022\035.winfiolAxeMed.SessionRequest\032\036.winfi"
  "olAxeMed.SessionResponse\"\000\022U\n\022CreateAsyn"
  "cSession\022\035.winfiolAxeMed.SessionRequest\032"
  "\034.winfiolAxeMed.StreamMessage\"\0000\001\022J\n\007Con"
  "nect\022\035.winfiolAxeMed.ConnectRequest\032\036.wi"
  "nfiolAxeMed.GenericResponse\"\000\022N\n\013SendCom"
  "mand\022\035.winfiolAxeMed.CommandRequest\032\036.wi"
  "nfiolAxeMed.CommandResponse\"\000\022S\n\020Connect"
  "ionStatus\022\035.winfiolAxeMed.GenericRequest"
  "\032\036.winfiolAxeMed.GenericResponse\"\000\022S\n\020Te"
  "rminateSession\022\035.winfiolAxeMed.GenericRe"
  "quest\032\036.winfiolAxeMed.GenericResponse\"\000\022"
  "[\n\021ControlNeTerminal\022$.winfiolAxeMed.Ter"
  "minalActionRequest\032\036.winfiolAxeMed.Gener"
  "icResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_winfiolAxeMed_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_winfiolAxeMed_2eproto_sccs[9] = {
  &scc_info_CommandRequest_winfiolAxeMed_2eproto.base,
  &scc_info_CommandResponse_winfiolAxeMed_2eproto.base,
  &scc_info_ConnectRequest_winfiolAxeMed_2eproto.base,
  &scc_info_GenericRequest_winfiolAxeMed_2eproto.base,
  &scc_info_GenericResponse_winfiolAxeMed_2eproto.base,
  &scc_info_SessionRequest_winfiolAxeMed_2eproto.base,
  &scc_info_SessionResponse_winfiolAxeMed_2eproto.base,
  &scc_info_StreamMessage_winfiolAxeMed_2eproto.base,
  &scc_info_TerminalActionRequest_winfiolAxeMed_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_winfiolAxeMed_2eproto_once;
static bool descriptor_table_winfiolAxeMed_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_winfiolAxeMed_2eproto = {
  &descriptor_table_winfiolAxeMed_2eproto_initialized, descriptor_table_protodef_winfiolAxeMed_2eproto, "winfiolAxeMed.proto", 1540,
  &descriptor_table_winfiolAxeMed_2eproto_once, descriptor_table_winfiolAxeMed_2eproto_sccs, descriptor_table_winfiolAxeMed_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_winfiolAxeMed_2eproto::offsets,
  file_level_metadata_winfiolAxeMed_2eproto, 9, file_level_enum_descriptors_winfiolAxeMed_2eproto, file_level_service_descriptors_winfiolAxeMed_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_winfiolAxeMed_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_winfiolAxeMed_2eproto), true);
namespace winfiolAxeMed {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectRequest_ApNodeSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_winfiolAxeMed_2eproto);
  return file_level_enum_descriptors_winfiolAxeMed_2eproto[0];
}
bool ConnectRequest_ApNodeSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConnectRequest_ApNodeSide ConnectRequest::CLUSTER;
constexpr ConnectRequest_ApNodeSide ConnectRequest::NODE_A;
constexpr ConnectRequest_ApNodeSide ConnectRequest::NODE_B;
constexpr ConnectRequest_ApNodeSide ConnectRequest::ApNodeSide_MIN;
constexpr ConnectRequest_ApNodeSide ConnectRequest::ApNodeSide_MAX;
constexpr int ConnectRequest::ApNodeSide_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectRequest_ApNode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_winfiolAxeMed_2eproto);
  return file_level_enum_descriptors_winfiolAxeMed_2eproto[1];
}
bool ConnectRequest_ApNode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConnectRequest_ApNode ConnectRequest::AP1;
constexpr ConnectRequest_ApNode ConnectRequest::AP2;
constexpr ConnectRequest_ApNode ConnectRequest::ApNode_MIN;
constexpr ConnectRequest_ApNode ConnectRequest::ApNode_MAX;
constexpr int ConnectRequest::ApNode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMessage_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_winfiolAxeMed_2eproto);
  return file_level_enum_descriptors_winfiolAxeMed_2eproto[2];
}
bool StreamMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamMessage_MessageType StreamMessage::CONTROL;
constexpr StreamMessage_MessageType StreamMessage::CMD_OUTPUT;
constexpr StreamMessage_MessageType StreamMessage::MessageType_MIN;
constexpr StreamMessage_MessageType StreamMessage::MessageType_MAX;
constexpr int StreamMessage::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TerminalActionRequest_TerminalAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_winfiolAxeMed_2eproto);
  return file_level_enum_descriptors_winfiolAxeMed_2eproto[3];
}
bool TerminalActionRequest_TerminalAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TerminalActionRequest_TerminalAction TerminalActionRequest::RELEASE;
constexpr TerminalActionRequest_TerminalAction TerminalActionRequest::CONNECT;
constexpr TerminalActionRequest_TerminalAction TerminalActionRequest::TerminalAction_MIN;
constexpr TerminalActionRequest_TerminalAction TerminalActionRequest::TerminalAction_MAX;
constexpr int TerminalActionRequest::TerminalAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SessionRequest::InitAsDefaultInstance() {
}
class SessionRequest::_Internal {
 public:
};

SessionRequest::SessionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:winfiolAxeMed.SessionRequest)
}
SessionRequest::SessionRequest(const SessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.clientname().empty()) {
    clientname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  enmuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.enmuserid().empty()) {
    enmuserid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enmuserid_);
  }
  // @@protoc_insertion_point(copy_constructor:winfiolAxeMed.SessionRequest)
}

void SessionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionRequest_winfiolAxeMed_2eproto.base);
  clientname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enmuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SessionRequest::~SessionRequest() {
  // @@protoc_insertion_point(destructor:winfiolAxeMed.SessionRequest)
  SharedDtor();
}

void SessionRequest::SharedDtor() {
  clientname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enmuserid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionRequest& SessionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionRequest_winfiolAxeMed_2eproto.base);
  return *internal_default_instance();
}


void SessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:winfiolAxeMed.SessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enmuserid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string clientName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_clientname(), ptr, ctx, "winfiolAxeMed.SessionRequest.clientName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string enmUserId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_enmuserid(), ptr, ctx, "winfiolAxeMed.SessionRequest.enmUserId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SessionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:winfiolAxeMed.SessionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string clientName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->clientname().data(), static_cast<int>(this->clientname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.SessionRequest.clientName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enmUserId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_enmuserid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->enmuserid().data(), static_cast<int>(this->enmuserid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.SessionRequest.enmUserId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:winfiolAxeMed.SessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:winfiolAxeMed.SessionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SessionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:winfiolAxeMed.SessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientName = 1;
  if (this->clientname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.SessionRequest.clientName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientname(), output);
  }

  // string enmUserId = 2;
  if (this->enmuserid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->enmuserid().data(), static_cast<int>(this->enmuserid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.SessionRequest.enmUserId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->enmuserid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:winfiolAxeMed.SessionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:winfiolAxeMed.SessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientName = 1;
  if (this->clientname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.SessionRequest.clientName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->clientname(), target);
  }

  // string enmUserId = 2;
  if (this->enmuserid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->enmuserid().data(), static_cast<int>(this->enmuserid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.SessionRequest.enmUserId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->enmuserid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:winfiolAxeMed.SessionRequest)
  return target;
}

size_t SessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:winfiolAxeMed.SessionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientName = 1;
  if (this->clientname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->clientname());
  }

  // string enmUserId = 2;
  if (this->enmuserid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->enmuserid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:winfiolAxeMed.SessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:winfiolAxeMed.SessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:winfiolAxeMed.SessionRequest)
    MergeFrom(*source);
  }
}

void SessionRequest::MergeFrom(const SessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:winfiolAxeMed.SessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientname().size() > 0) {

    clientname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.enmuserid().size() > 0) {

    enmuserid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.enmuserid_);
  }
}

void SessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:winfiolAxeMed.SessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionRequest::CopyFrom(const SessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:winfiolAxeMed.SessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRequest::IsInitialized() const {
  return true;
}

void SessionRequest::InternalSwap(SessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clientname_.Swap(&other->clientname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enmuserid_.Swap(&other->enmuserid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionResponse::InitAsDefaultInstance() {
}
class SessionResponse::_Internal {
 public:
};

SessionResponse::SessionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:winfiolAxeMed.SessionResponse)
}
SessionResponse::SessionResponse(const SessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sessionid().empty()) {
    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:winfiolAxeMed.SessionResponse)
}

void SessionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionResponse_winfiolAxeMed_2eproto.base);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SessionResponse::~SessionResponse() {
  // @@protoc_insertion_point(destructor:winfiolAxeMed.SessionResponse)
  SharedDtor();
}

void SessionResponse::SharedDtor() {
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionResponse& SessionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionResponse_winfiolAxeMed_2eproto.base);
  return *internal_default_instance();
}


void SessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:winfiolAxeMed.SessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SessionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sessionid(), ptr, ctx, "winfiolAxeMed.SessionResponse.sessionId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SessionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:winfiolAxeMed.SessionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sessionId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.SessionResponse.sessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:winfiolAxeMed.SessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:winfiolAxeMed.SessionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SessionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:winfiolAxeMed.SessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.SessionResponse.sessionId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:winfiolAxeMed.SessionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:winfiolAxeMed.SessionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.SessionResponse.sessionId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:winfiolAxeMed.SessionResponse)
  return target;
}

size_t SessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:winfiolAxeMed.SessionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:winfiolAxeMed.SessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:winfiolAxeMed.SessionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:winfiolAxeMed.SessionResponse)
    MergeFrom(*source);
  }
}

void SessionResponse::MergeFrom(const SessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:winfiolAxeMed.SessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
}

void SessionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:winfiolAxeMed.SessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionResponse::CopyFrom(const SessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:winfiolAxeMed.SessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionResponse::IsInitialized() const {
  return true;
}

void SessionResponse::InternalSwap(SessionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectRequest::InitAsDefaultInstance() {
}
class ConnectRequest::_Internal {
 public:
};

ConnectRequest::ConnectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:winfiolAxeMed.ConnectRequest)
}
ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sessionid().empty()) {
    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  neid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.neid().empty()) {
    neid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neid_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&nodeside_, &from.nodeside_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_) -
    reinterpret_cast<char*>(&nodeside_)) + sizeof(node_));
  // @@protoc_insertion_point(copy_constructor:winfiolAxeMed.ConnectRequest)
}

void ConnectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectRequest_winfiolAxeMed_2eproto.base);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodeside_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_) -
      reinterpret_cast<char*>(&nodeside_)) + sizeof(node_));
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:winfiolAxeMed.ConnectRequest)
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectRequest& ConnectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectRequest_winfiolAxeMed_2eproto.base);
  return *internal_default_instance();
}


void ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:winfiolAxeMed.ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodeside_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_) -
      reinterpret_cast<char*>(&nodeside_)) + sizeof(node_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sessionid(), ptr, ctx, "winfiolAxeMed.ConnectRequest.sessionId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_neid(), ptr, ctx, "winfiolAxeMed.ConnectRequest.neId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .winfiolAxeMed.ConnectRequest.ApNodeSide nodeSide = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_nodeside(static_cast<::winfiolAxeMed::ConnectRequest_ApNodeSide>(val));
        } else goto handle_unusual;
        continue;
      // string username = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_username(), ptr, ctx, "winfiolAxeMed.ConnectRequest.username");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_password(), ptr, ctx, "winfiolAxeMed.ConnectRequest.password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .winfiolAxeMed.ConnectRequest.ApNode node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_node(static_cast<::winfiolAxeMed::ConnectRequest_ApNode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:winfiolAxeMed.ConnectRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sessionId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.ConnectRequest.sessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string neId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_neid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->neid().data(), static_cast<int>(this->neid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.ConnectRequest.neId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .winfiolAxeMed.ConnectRequest.ApNodeSide nodeSide = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nodeside(static_cast< ::winfiolAxeMed::ConnectRequest_ApNodeSide >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.ConnectRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.ConnectRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .winfiolAxeMed.ConnectRequest.ApNode node = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_node(static_cast< ::winfiolAxeMed::ConnectRequest_ApNode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:winfiolAxeMed.ConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:winfiolAxeMed.ConnectRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:winfiolAxeMed.ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.ConnectRequest.sessionId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // string neId = 2;
  if (this->neid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->neid().data(), static_cast<int>(this->neid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.ConnectRequest.neId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->neid(), output);
  }

  // .winfiolAxeMed.ConnectRequest.ApNodeSide nodeSide = 3;
  if (this->nodeside() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->nodeside(), output);
  }

  // string username = 4;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.ConnectRequest.username");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.ConnectRequest.password");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // .winfiolAxeMed.ConnectRequest.ApNode node = 6;
  if (this->node() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->node(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:winfiolAxeMed.ConnectRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:winfiolAxeMed.ConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.ConnectRequest.sessionId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // string neId = 2;
  if (this->neid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->neid().data(), static_cast<int>(this->neid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.ConnectRequest.neId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->neid(), target);
  }

  // .winfiolAxeMed.ConnectRequest.ApNodeSide nodeSide = 3;
  if (this->nodeside() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->nodeside(), target);
  }

  // string username = 4;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.ConnectRequest.username");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.ConnectRequest.password");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // .winfiolAxeMed.ConnectRequest.ApNode node = 6;
  if (this->node() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->node(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:winfiolAxeMed.ConnectRequest)
  return target;
}

size_t ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:winfiolAxeMed.ConnectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  // string neId = 2;
  if (this->neid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->neid());
  }

  // string username = 4;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->password());
  }

  // .winfiolAxeMed.ConnectRequest.ApNodeSide nodeSide = 3;
  if (this->nodeside() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->nodeside());
  }

  // .winfiolAxeMed.ConnectRequest.ApNode node = 6;
  if (this->node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->node());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:winfiolAxeMed.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:winfiolAxeMed.ConnectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:winfiolAxeMed.ConnectRequest)
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:winfiolAxeMed.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  if (from.neid().size() > 0) {

    neid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neid_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.nodeside() != 0) {
    set_nodeside(from.nodeside());
  }
  if (from.node() != 0) {
    set_node(from.node());
  }
}

void ConnectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:winfiolAxeMed.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:winfiolAxeMed.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  return true;
}

void ConnectRequest::InternalSwap(ConnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  neid_.Swap(&other->neid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nodeside_, other->nodeside_);
  swap(node_, other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandRequest::InitAsDefaultInstance() {
}
class CommandRequest::_Internal {
 public:
};

CommandRequest::CommandRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:winfiolAxeMed.CommandRequest)
}
CommandRequest::CommandRequest(const CommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sessionid().empty()) {
    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  cmdinput_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.cmdinput().empty()) {
    cmdinput_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmdinput_);
  }
  cmdtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.cmdtype().empty()) {
    cmdtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmdtype_);
  }
  cpname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.cpname().empty()) {
    cpname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpname_);
  }
  // @@protoc_insertion_point(copy_constructor:winfiolAxeMed.CommandRequest)
}

void CommandRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandRequest_winfiolAxeMed_2eproto.base);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmdinput_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmdtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommandRequest::~CommandRequest() {
  // @@protoc_insertion_point(destructor:winfiolAxeMed.CommandRequest)
  SharedDtor();
}

void CommandRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmdinput_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmdtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandRequest& CommandRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandRequest_winfiolAxeMed_2eproto.base);
  return *internal_default_instance();
}


void CommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:winfiolAxeMed.CommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmdinput_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmdtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sessionid(), ptr, ctx, "winfiolAxeMed.CommandRequest.sessionId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cmdInput = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cmdinput(), ptr, ctx, "winfiolAxeMed.CommandRequest.cmdInput");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cmdType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cmdtype(), ptr, ctx, "winfiolAxeMed.CommandRequest.cmdType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cpName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cpname(), ptr, ctx, "winfiolAxeMed.CommandRequest.cpName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommandRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:winfiolAxeMed.CommandRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sessionId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.CommandRequest.sessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmdInput = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdinput()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cmdinput().data(), static_cast<int>(this->cmdinput().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.CommandRequest.cmdInput"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmdType = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdtype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cmdtype().data(), static_cast<int>(this->cmdtype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.CommandRequest.cmdType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cpName = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cpname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cpname().data(), static_cast<int>(this->cpname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.CommandRequest.cpName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:winfiolAxeMed.CommandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:winfiolAxeMed.CommandRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommandRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:winfiolAxeMed.CommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.CommandRequest.sessionId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // string cmdInput = 2;
  if (this->cmdinput().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cmdinput().data(), static_cast<int>(this->cmdinput().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.CommandRequest.cmdInput");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmdinput(), output);
  }

  // string cmdType = 3;
  if (this->cmdtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cmdtype().data(), static_cast<int>(this->cmdtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.CommandRequest.cmdType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cmdtype(), output);
  }

  // string cpName = 4;
  if (this->cpname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cpname().data(), static_cast<int>(this->cpname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.CommandRequest.cpName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cpname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:winfiolAxeMed.CommandRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:winfiolAxeMed.CommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.CommandRequest.sessionId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // string cmdInput = 2;
  if (this->cmdinput().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cmdinput().data(), static_cast<int>(this->cmdinput().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.CommandRequest.cmdInput");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->cmdinput(), target);
  }

  // string cmdType = 3;
  if (this->cmdtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cmdtype().data(), static_cast<int>(this->cmdtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.CommandRequest.cmdType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->cmdtype(), target);
  }

  // string cpName = 4;
  if (this->cpname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cpname().data(), static_cast<int>(this->cpname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.CommandRequest.cpName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->cpname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:winfiolAxeMed.CommandRequest)
  return target;
}

size_t CommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:winfiolAxeMed.CommandRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  // string cmdInput = 2;
  if (this->cmdinput().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cmdinput());
  }

  // string cmdType = 3;
  if (this->cmdtype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cmdtype());
  }

  // string cpName = 4;
  if (this->cpname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cpname());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:winfiolAxeMed.CommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:winfiolAxeMed.CommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:winfiolAxeMed.CommandRequest)
    MergeFrom(*source);
  }
}

void CommandRequest::MergeFrom(const CommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:winfiolAxeMed.CommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  if (from.cmdinput().size() > 0) {

    cmdinput_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmdinput_);
  }
  if (from.cmdtype().size() > 0) {

    cmdtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmdtype_);
  }
  if (from.cpname().size() > 0) {

    cpname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpname_);
  }
}

void CommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:winfiolAxeMed.CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRequest::CopyFrom(const CommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:winfiolAxeMed.CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRequest::IsInitialized() const {
  return true;
}

void CommandRequest::InternalSwap(CommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cmdinput_.Swap(&other->cmdinput_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cmdtype_.Swap(&other->cmdtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cpname_.Swap(&other->cpname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandResponse::InitAsDefaultInstance() {
}
class CommandResponse::_Internal {
 public:
};

CommandResponse::CommandResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:winfiolAxeMed.CommandResponse)
}
CommandResponse::CommandResponse(const CommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmdoutput_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.cmdoutput().empty()) {
    cmdoutput_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmdoutput_);
  }
  // @@protoc_insertion_point(copy_constructor:winfiolAxeMed.CommandResponse)
}

void CommandResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandResponse_winfiolAxeMed_2eproto.base);
  cmdoutput_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommandResponse::~CommandResponse() {
  // @@protoc_insertion_point(destructor:winfiolAxeMed.CommandResponse)
  SharedDtor();
}

void CommandResponse::SharedDtor() {
  cmdoutput_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandResponse& CommandResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandResponse_winfiolAxeMed_2eproto.base);
  return *internal_default_instance();
}


void CommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:winfiolAxeMed.CommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmdoutput_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cmdOutput = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cmdoutput(), ptr, ctx, "winfiolAxeMed.CommandResponse.cmdOutput");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommandResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:winfiolAxeMed.CommandResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cmdOutput = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdoutput()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cmdoutput().data(), static_cast<int>(this->cmdoutput().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.CommandResponse.cmdOutput"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:winfiolAxeMed.CommandResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:winfiolAxeMed.CommandResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommandResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:winfiolAxeMed.CommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmdOutput = 1;
  if (this->cmdoutput().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cmdoutput().data(), static_cast<int>(this->cmdoutput().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.CommandResponse.cmdOutput");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmdoutput(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:winfiolAxeMed.CommandResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:winfiolAxeMed.CommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmdOutput = 1;
  if (this->cmdoutput().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cmdoutput().data(), static_cast<int>(this->cmdoutput().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.CommandResponse.cmdOutput");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cmdoutput(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:winfiolAxeMed.CommandResponse)
  return target;
}

size_t CommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:winfiolAxeMed.CommandResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmdOutput = 1;
  if (this->cmdoutput().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cmdoutput());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:winfiolAxeMed.CommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:winfiolAxeMed.CommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:winfiolAxeMed.CommandResponse)
    MergeFrom(*source);
  }
}

void CommandResponse::MergeFrom(const CommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:winfiolAxeMed.CommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmdoutput().size() > 0) {

    cmdoutput_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmdoutput_);
  }
}

void CommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:winfiolAxeMed.CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResponse::CopyFrom(const CommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:winfiolAxeMed.CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResponse::IsInitialized() const {
  return true;
}

void CommandResponse::InternalSwap(CommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cmdoutput_.Swap(&other->cmdoutput_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamMessage::InitAsDefaultInstance() {
}
class StreamMessage::_Internal {
 public:
};

StreamMessage::StreamMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:winfiolAxeMed.StreamMessage)
}
StreamMessage::StreamMessage(const StreamMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sessionid().empty()) {
    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:winfiolAxeMed.StreamMessage)
}

void StreamMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamMessage_winfiolAxeMed_2eproto.base);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

StreamMessage::~StreamMessage() {
  // @@protoc_insertion_point(destructor:winfiolAxeMed.StreamMessage)
  SharedDtor();
}

void StreamMessage::SharedDtor() {
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamMessage& StreamMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamMessage_winfiolAxeMed_2eproto.base);
  return *internal_default_instance();
}


void StreamMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:winfiolAxeMed.StreamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreamMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sessionid(), ptr, ctx, "winfiolAxeMed.StreamMessage.sessionId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .winfiolAxeMed.StreamMessage.MessageType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::winfiolAxeMed::StreamMessage_MessageType>(val));
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message(), ptr, ctx, "winfiolAxeMed.StreamMessage.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreamMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:winfiolAxeMed.StreamMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sessionId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.StreamMessage.sessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .winfiolAxeMed.StreamMessage.MessageType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::winfiolAxeMed::StreamMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.StreamMessage.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:winfiolAxeMed.StreamMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:winfiolAxeMed.StreamMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreamMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:winfiolAxeMed.StreamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.StreamMessage.sessionId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // .winfiolAxeMed.StreamMessage.MessageType type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.StreamMessage.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:winfiolAxeMed.StreamMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:winfiolAxeMed.StreamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.StreamMessage.sessionId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // .winfiolAxeMed.StreamMessage.MessageType type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.StreamMessage.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:winfiolAxeMed.StreamMessage)
  return target;
}

size_t StreamMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:winfiolAxeMed.StreamMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .winfiolAxeMed.StreamMessage.MessageType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:winfiolAxeMed.StreamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:winfiolAxeMed.StreamMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:winfiolAxeMed.StreamMessage)
    MergeFrom(*source);
  }
}

void StreamMessage::MergeFrom(const StreamMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:winfiolAxeMed.StreamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void StreamMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:winfiolAxeMed.StreamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMessage::CopyFrom(const StreamMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:winfiolAxeMed.StreamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage::IsInitialized() const {
  return true;
}

void StreamMessage::InternalSwap(StreamMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TerminalActionRequest::InitAsDefaultInstance() {
}
class TerminalActionRequest::_Internal {
 public:
};

TerminalActionRequest::TerminalActionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:winfiolAxeMed.TerminalActionRequest)
}
TerminalActionRequest::TerminalActionRequest(const TerminalActionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sessionid().empty()) {
    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:winfiolAxeMed.TerminalActionRequest)
}

void TerminalActionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TerminalActionRequest_winfiolAxeMed_2eproto.base);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
}

TerminalActionRequest::~TerminalActionRequest() {
  // @@protoc_insertion_point(destructor:winfiolAxeMed.TerminalActionRequest)
  SharedDtor();
}

void TerminalActionRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TerminalActionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TerminalActionRequest& TerminalActionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TerminalActionRequest_winfiolAxeMed_2eproto.base);
  return *internal_default_instance();
}


void TerminalActionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:winfiolAxeMed.TerminalActionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TerminalActionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sessionid(), ptr, ctx, "winfiolAxeMed.TerminalActionRequest.sessionId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .winfiolAxeMed.TerminalActionRequest.TerminalAction action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_action(static_cast<::winfiolAxeMed::TerminalActionRequest_TerminalAction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TerminalActionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:winfiolAxeMed.TerminalActionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sessionId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.TerminalActionRequest.sessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .winfiolAxeMed.TerminalActionRequest.TerminalAction action = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::winfiolAxeMed::TerminalActionRequest_TerminalAction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:winfiolAxeMed.TerminalActionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:winfiolAxeMed.TerminalActionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TerminalActionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:winfiolAxeMed.TerminalActionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.TerminalActionRequest.sessionId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // .winfiolAxeMed.TerminalActionRequest.TerminalAction action = 2;
  if (this->action() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:winfiolAxeMed.TerminalActionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* TerminalActionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:winfiolAxeMed.TerminalActionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.TerminalActionRequest.sessionId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // .winfiolAxeMed.TerminalActionRequest.TerminalAction action = 2;
  if (this->action() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:winfiolAxeMed.TerminalActionRequest)
  return target;
}

size_t TerminalActionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:winfiolAxeMed.TerminalActionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  // .winfiolAxeMed.TerminalActionRequest.TerminalAction action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TerminalActionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:winfiolAxeMed.TerminalActionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TerminalActionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TerminalActionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:winfiolAxeMed.TerminalActionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:winfiolAxeMed.TerminalActionRequest)
    MergeFrom(*source);
  }
}

void TerminalActionRequest::MergeFrom(const TerminalActionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:winfiolAxeMed.TerminalActionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void TerminalActionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:winfiolAxeMed.TerminalActionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminalActionRequest::CopyFrom(const TerminalActionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:winfiolAxeMed.TerminalActionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminalActionRequest::IsInitialized() const {
  return true;
}

void TerminalActionRequest::InternalSwap(TerminalActionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminalActionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericRequest::InitAsDefaultInstance() {
}
class GenericRequest::_Internal {
 public:
};

GenericRequest::GenericRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:winfiolAxeMed.GenericRequest)
}
GenericRequest::GenericRequest(const GenericRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sessionid().empty()) {
    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:winfiolAxeMed.GenericRequest)
}

void GenericRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericRequest_winfiolAxeMed_2eproto.base);
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenericRequest::~GenericRequest() {
  // @@protoc_insertion_point(destructor:winfiolAxeMed.GenericRequest)
  SharedDtor();
}

void GenericRequest::SharedDtor() {
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericRequest& GenericRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericRequest_winfiolAxeMed_2eproto.base);
  return *internal_default_instance();
}


void GenericRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:winfiolAxeMed.GenericRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sessionid(), ptr, ctx, "winfiolAxeMed.GenericRequest.sessionId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:winfiolAxeMed.GenericRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sessionId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sessionid().data(), static_cast<int>(this->sessionid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "winfiolAxeMed.GenericRequest.sessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:winfiolAxeMed.GenericRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:winfiolAxeMed.GenericRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:winfiolAxeMed.GenericRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.GenericRequest.sessionId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:winfiolAxeMed.GenericRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:winfiolAxeMed.GenericRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), static_cast<int>(this->sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "winfiolAxeMed.GenericRequest.sessionId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:winfiolAxeMed.GenericRequest)
  return target;
}

size_t GenericRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:winfiolAxeMed.GenericRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:winfiolAxeMed.GenericRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:winfiolAxeMed.GenericRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:winfiolAxeMed.GenericRequest)
    MergeFrom(*source);
  }
}

void GenericRequest::MergeFrom(const GenericRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:winfiolAxeMed.GenericRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
}

void GenericRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:winfiolAxeMed.GenericRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericRequest::CopyFrom(const GenericRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:winfiolAxeMed.GenericRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericRequest::IsInitialized() const {
  return true;
}

void GenericRequest::InternalSwap(GenericRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericResponse::InitAsDefaultInstance() {
}
class GenericResponse::_Internal {
 public:
};

GenericResponse::GenericResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:winfiolAxeMed.GenericResponse)
}
GenericResponse::GenericResponse(const GenericResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:winfiolAxeMed.GenericResponse)
}

void GenericResponse::SharedCtor() {
  status_ = 0;
}

GenericResponse::~GenericResponse() {
  // @@protoc_insertion_point(destructor:winfiolAxeMed.GenericResponse)
  SharedDtor();
}

void GenericResponse::SharedDtor() {
}

void GenericResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericResponse& GenericResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericResponse_winfiolAxeMed_2eproto.base);
  return *internal_default_instance();
}


void GenericResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:winfiolAxeMed.GenericResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:winfiolAxeMed.GenericResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:winfiolAxeMed.GenericResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:winfiolAxeMed.GenericResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:winfiolAxeMed.GenericResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:winfiolAxeMed.GenericResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:winfiolAxeMed.GenericResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:winfiolAxeMed.GenericResponse)
  return target;
}

size_t GenericResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:winfiolAxeMed.GenericResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:winfiolAxeMed.GenericResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:winfiolAxeMed.GenericResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:winfiolAxeMed.GenericResponse)
    MergeFrom(*source);
  }
}

void GenericResponse::MergeFrom(const GenericResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:winfiolAxeMed.GenericResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void GenericResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:winfiolAxeMed.GenericResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericResponse::CopyFrom(const GenericResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:winfiolAxeMed.GenericResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericResponse::IsInitialized() const {
  return true;
}

void GenericResponse::InternalSwap(GenericResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace winfiolAxeMed
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::winfiolAxeMed::SessionRequest* Arena::CreateMaybeMessage< ::winfiolAxeMed::SessionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::winfiolAxeMed::SessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::winfiolAxeMed::SessionResponse* Arena::CreateMaybeMessage< ::winfiolAxeMed::SessionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::winfiolAxeMed::SessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::winfiolAxeMed::ConnectRequest* Arena::CreateMaybeMessage< ::winfiolAxeMed::ConnectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::winfiolAxeMed::ConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::winfiolAxeMed::CommandRequest* Arena::CreateMaybeMessage< ::winfiolAxeMed::CommandRequest >(Arena* arena) {
  return Arena::CreateInternal< ::winfiolAxeMed::CommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::winfiolAxeMed::CommandResponse* Arena::CreateMaybeMessage< ::winfiolAxeMed::CommandResponse >(Arena* arena) {
  return Arena::CreateInternal< ::winfiolAxeMed::CommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::winfiolAxeMed::StreamMessage* Arena::CreateMaybeMessage< ::winfiolAxeMed::StreamMessage >(Arena* arena) {
  return Arena::CreateInternal< ::winfiolAxeMed::StreamMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::winfiolAxeMed::TerminalActionRequest* Arena::CreateMaybeMessage< ::winfiolAxeMed::TerminalActionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::winfiolAxeMed::TerminalActionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::winfiolAxeMed::GenericRequest* Arena::CreateMaybeMessage< ::winfiolAxeMed::GenericRequest >(Arena* arena) {
  return Arena::CreateInternal< ::winfiolAxeMed::GenericRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::winfiolAxeMed::GenericResponse* Arena::CreateMaybeMessage< ::winfiolAxeMed::GenericResponse >(Arena* arena) {
  return Arena::CreateInternal< ::winfiolAxeMed::GenericResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
