// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: winfiolAxeMed.proto

#include "winfiolAxeMed.pb.h"
#include "winfiolAxeMed.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace winfiolAxeMed {

static const char* WinFIOLAxeMediation_method_names[] = {
  "/winfiolAxeMed.WinFIOLAxeMediation/CreateSession",
  "/winfiolAxeMed.WinFIOLAxeMediation/CreateAsyncSession",
  "/winfiolAxeMed.WinFIOLAxeMediation/Connect",
  "/winfiolAxeMed.WinFIOLAxeMediation/SendCommand",
  "/winfiolAxeMed.WinFIOLAxeMediation/ConnectionStatus",
  "/winfiolAxeMed.WinFIOLAxeMediation/TerminateSession",
  "/winfiolAxeMed.WinFIOLAxeMediation/ControlNeTerminal",
};

std::unique_ptr< WinFIOLAxeMediation::Stub> WinFIOLAxeMediation::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WinFIOLAxeMediation::Stub> stub(new WinFIOLAxeMediation::Stub(channel));
  return stub;
}

WinFIOLAxeMediation::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateSession_(WinFIOLAxeMediation_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAsyncSession_(WinFIOLAxeMediation_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Connect_(WinFIOLAxeMediation_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendCommand_(WinFIOLAxeMediation_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectionStatus_(WinFIOLAxeMediation_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TerminateSession_(WinFIOLAxeMediation_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ControlNeTerminal_(WinFIOLAxeMediation_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WinFIOLAxeMediation::Stub::CreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::winfiolAxeMed::SessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateSession_, context, request, response);
}

void WinFIOLAxeMediation::Stub::experimental_async::CreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest* request, ::winfiolAxeMed::SessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateSession_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::SessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateSession_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::CreateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest* request, ::winfiolAxeMed::SessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateSession_, context, request, response, reactor);
}

void WinFIOLAxeMediation::Stub::experimental_async::CreateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::SessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::SessionResponse>* WinFIOLAxeMediation::Stub::AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::SessionResponse>::Create(channel_.get(), cq, rpcmethod_CreateSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::SessionResponse>* WinFIOLAxeMediation::Stub::PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::SessionResponse>::Create(channel_.get(), cq, rpcmethod_CreateSession_, context, request, false);
}

::grpc::ClientReader< ::winfiolAxeMed::StreamMessage>* WinFIOLAxeMediation::Stub::CreateAsyncSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::winfiolAxeMed::StreamMessage>::Create(channel_.get(), rpcmethod_CreateAsyncSession_, context, request);
}

void WinFIOLAxeMediation::Stub::experimental_async::CreateAsyncSession(::grpc::ClientContext* context, ::winfiolAxeMed::SessionRequest* request, ::grpc::experimental::ClientReadReactor< ::winfiolAxeMed::StreamMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::winfiolAxeMed::StreamMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_CreateAsyncSession_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::winfiolAxeMed::StreamMessage>* WinFIOLAxeMediation::Stub::AsyncCreateAsyncSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::winfiolAxeMed::StreamMessage>::Create(channel_.get(), cq, rpcmethod_CreateAsyncSession_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::winfiolAxeMed::StreamMessage>* WinFIOLAxeMediation::Stub::PrepareAsyncCreateAsyncSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::SessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::winfiolAxeMed::StreamMessage>::Create(channel_.get(), cq, rpcmethod_CreateAsyncSession_, context, request, false, nullptr);
}

::grpc::Status WinFIOLAxeMediation::Stub::Connect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::winfiolAxeMed::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void WinFIOLAxeMediation::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

void WinFIOLAxeMediation::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* WinFIOLAxeMediation::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::GenericResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* WinFIOLAxeMediation::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::GenericResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, false);
}

::grpc::Status WinFIOLAxeMediation::Stub::SendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::winfiolAxeMed::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendCommand_, context, request, response);
}

void WinFIOLAxeMediation::Stub::experimental_async::SendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest* request, ::winfiolAxeMed::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendCommand_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::SendCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendCommand_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::SendCommand(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest* request, ::winfiolAxeMed::CommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendCommand_, context, request, response, reactor);
}

void WinFIOLAxeMediation::Stub::experimental_async::SendCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::CommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::CommandResponse>* WinFIOLAxeMediation::Stub::AsyncSendCommandRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::CommandResponse>::Create(channel_.get(), cq, rpcmethod_SendCommand_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::CommandResponse>* WinFIOLAxeMediation::Stub::PrepareAsyncSendCommandRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::CommandResponse>::Create(channel_.get(), cq, rpcmethod_SendCommand_, context, request, false);
}

::grpc::Status WinFIOLAxeMediation::Stub::ConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::winfiolAxeMed::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConnectionStatus_, context, request, response);
}

void WinFIOLAxeMediation::Stub::experimental_async::ConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConnectionStatus_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::ConnectionStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConnectionStatus_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::ConnectionStatus(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConnectionStatus_, context, request, response, reactor);
}

void WinFIOLAxeMediation::Stub::experimental_async::ConnectionStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConnectionStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* WinFIOLAxeMediation::Stub::AsyncConnectionStatusRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::GenericResponse>::Create(channel_.get(), cq, rpcmethod_ConnectionStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* WinFIOLAxeMediation::Stub::PrepareAsyncConnectionStatusRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::GenericResponse>::Create(channel_.get(), cq, rpcmethod_ConnectionStatus_, context, request, false);
}

::grpc::Status WinFIOLAxeMediation::Stub::TerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::winfiolAxeMed::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TerminateSession_, context, request, response);
}

void WinFIOLAxeMediation::Stub::experimental_async::TerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TerminateSession_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::TerminateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TerminateSession_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::TerminateSession(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TerminateSession_, context, request, response, reactor);
}

void WinFIOLAxeMediation::Stub::experimental_async::TerminateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TerminateSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* WinFIOLAxeMediation::Stub::AsyncTerminateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::GenericResponse>::Create(channel_.get(), cq, rpcmethod_TerminateSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* WinFIOLAxeMediation::Stub::PrepareAsyncTerminateSessionRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::GenericRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::GenericResponse>::Create(channel_.get(), cq, rpcmethod_TerminateSession_, context, request, false);
}

::grpc::Status WinFIOLAxeMediation::Stub::ControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::winfiolAxeMed::GenericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ControlNeTerminal_, context, request, response);
}

void WinFIOLAxeMediation::Stub::experimental_async::ControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControlNeTerminal_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::ControlNeTerminal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ControlNeTerminal_, context, request, response, std::move(f));
}

void WinFIOLAxeMediation::Stub::experimental_async::ControlNeTerminal(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControlNeTerminal_, context, request, response, reactor);
}

void WinFIOLAxeMediation::Stub::experimental_async::ControlNeTerminal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::winfiolAxeMed::GenericResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ControlNeTerminal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* WinFIOLAxeMediation::Stub::AsyncControlNeTerminalRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::GenericResponse>::Create(channel_.get(), cq, rpcmethod_ControlNeTerminal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::winfiolAxeMed::GenericResponse>* WinFIOLAxeMediation::Stub::PrepareAsyncControlNeTerminalRaw(::grpc::ClientContext* context, const ::winfiolAxeMed::TerminalActionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::winfiolAxeMed::GenericResponse>::Create(channel_.get(), cq, rpcmethod_ControlNeTerminal_, context, request, false);
}

WinFIOLAxeMediation::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinFIOLAxeMediation_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinFIOLAxeMediation::Service, ::winfiolAxeMed::SessionRequest, ::winfiolAxeMed::SessionResponse>(
          std::mem_fn(&WinFIOLAxeMediation::Service::CreateSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinFIOLAxeMediation_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< WinFIOLAxeMediation::Service, ::winfiolAxeMed::SessionRequest, ::winfiolAxeMed::StreamMessage>(
          std::mem_fn(&WinFIOLAxeMediation::Service::CreateAsyncSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinFIOLAxeMediation_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinFIOLAxeMediation::Service, ::winfiolAxeMed::ConnectRequest, ::winfiolAxeMed::GenericResponse>(
          std::mem_fn(&WinFIOLAxeMediation::Service::Connect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinFIOLAxeMediation_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinFIOLAxeMediation::Service, ::winfiolAxeMed::CommandRequest, ::winfiolAxeMed::CommandResponse>(
          std::mem_fn(&WinFIOLAxeMediation::Service::SendCommand), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinFIOLAxeMediation_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinFIOLAxeMediation::Service, ::winfiolAxeMed::GenericRequest, ::winfiolAxeMed::GenericResponse>(
          std::mem_fn(&WinFIOLAxeMediation::Service::ConnectionStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinFIOLAxeMediation_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinFIOLAxeMediation::Service, ::winfiolAxeMed::GenericRequest, ::winfiolAxeMed::GenericResponse>(
          std::mem_fn(&WinFIOLAxeMediation::Service::TerminateSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WinFIOLAxeMediation_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WinFIOLAxeMediation::Service, ::winfiolAxeMed::TerminalActionRequest, ::winfiolAxeMed::GenericResponse>(
          std::mem_fn(&WinFIOLAxeMediation::Service::ControlNeTerminal), this)));
}

WinFIOLAxeMediation::Service::~Service() {
}

::grpc::Status WinFIOLAxeMediation::Service::CreateSession(::grpc::ServerContext* context, const ::winfiolAxeMed::SessionRequest* request, ::winfiolAxeMed::SessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinFIOLAxeMediation::Service::CreateAsyncSession(::grpc::ServerContext* context, const ::winfiolAxeMed::SessionRequest* request, ::grpc::ServerWriter< ::winfiolAxeMed::StreamMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinFIOLAxeMediation::Service::Connect(::grpc::ServerContext* context, const ::winfiolAxeMed::ConnectRequest* request, ::winfiolAxeMed::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinFIOLAxeMediation::Service::SendCommand(::grpc::ServerContext* context, const ::winfiolAxeMed::CommandRequest* request, ::winfiolAxeMed::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinFIOLAxeMediation::Service::ConnectionStatus(::grpc::ServerContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinFIOLAxeMediation::Service::TerminateSession(::grpc::ServerContext* context, const ::winfiolAxeMed::GenericRequest* request, ::winfiolAxeMed::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WinFIOLAxeMediation::Service::ControlNeTerminal(::grpc::ServerContext* context, const ::winfiolAxeMed::TerminalActionRequest* request, ::winfiolAxeMed::GenericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace winfiolAxeMed

